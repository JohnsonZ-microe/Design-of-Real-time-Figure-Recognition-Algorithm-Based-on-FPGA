module gaussian_function(
	clk,       //输入：时钟信号
	rst_n,     //输入：复位信号
	Cb,        //输入：通道Cb输入
	Cr,        //输入：通道Cr输入
	gauss      //输出：gauss值
	);
	
input clk;
input [9:0]Cb;
input [9:0]Cr;
output reg [3:0] gauss;



wire [9:0] gauss_cb_judge;
wire [9:0] gauss_cr_judge;
wire cb_sign;
wire cr_sign;

//拍1，计算绝对值与平方
always @(posedge clk or negedge rst_n) begin
	if(rst_n==1'b0)  begin
		gauss_cb_judge = 10'b0000000000;
		gauss_cr_judge = 10'b0000000000;
	end
	else begin
		if (Cb>10'd704) begin
			gauss_cb_judge = Cb - 10'd704;
			cb_sign = 1'b0;
		end
		else if(Cb <= 10'd704) begin
			gauss_cb_judge = 10'd704 - Cb;
			cb_sign =1'b1;
		end
		if (Cr>10'd780) begin
			gauss_cr_judge = Cr - 10'd780;
			cr_sign = 1'b0;
		end
		else if(Cr <= 10'd780) begin
			gauss_cr_judge = 10'd780 - Cr;
			cr_sign = 1'b1;
		end
	end
end 

reg [19:0]  gauss_cb_square;
reg [19:0]  gauss_cr_square;
reg [19:0]  gauss_cbcr_mult;

square square_cb(
	.dataa(gauss_cb_judge),
	.result(gauss_cb_square)
	);
	
square square_cr(
	.dataa(gauss_cr_judge),
	.result(gauss_cr_square)
	);
	
mult mult_crcb(
	.dataa(gauss_cb_judge),
	.datab(gauss_cr_judge),
	.result(gauss_cbcr_mult)
);


reg [20:0] gauss_A;
wire [19:0] sign_gauss_crcb_mult;

always@(gauss_cbcr_mult or cb_sign or cr_sign)  begin
if(cb_sign^~cr_sign == 1'b1)  begin
	sign_gauss_crcb_mult <= gauss_cbcr_mult;
	cb_sign <= cb_sign;
	cr_sign <= cr_sign;
end
else
	sign_gauss_crcb_mult <= 19'b1111111111111111111 - gauss_cbcr_mult;
	cb_sign <= cb_sign;
	cr_sign <= cr_sign;
end
end

assign gauss_A =  gauss_cb_square + gauss_cr_square + sign_gauss_crcb_mult;

endmodule
