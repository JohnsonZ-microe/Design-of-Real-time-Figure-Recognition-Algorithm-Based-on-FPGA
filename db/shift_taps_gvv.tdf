--altshift_taps CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone II" NUMBER_OF_TAPS=2 RAM_BLOCK_TYPE="M4K" TAP_DISTANCE=60 WIDTH=10 aclr clken clock shiftin shiftout taps CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 CYCLONEII_M4K_COMPATIBILITY="ON" INTENDED_DEVICE_FAMILY="Cyclone II" LOW_POWER_MODE="AUTO" lpm_hint="RAM_BLOCK_TYPE=M4K"
--VERSION_BEGIN 13.0 cbx_altdpram 2013:06:12:18:03:40:SJ cbx_altshift_taps 2013:06:12:18:03:40:SJ cbx_altsyncram 2013:06:12:18:03:40:SJ cbx_cycloneii 2013:06:12:18:03:40:SJ cbx_lpm_add_sub 2013:06:12:18:03:40:SJ cbx_lpm_compare 2013:06:12:18:03:40:SJ cbx_lpm_counter 2013:06:12:18:03:40:SJ cbx_lpm_decode 2013:06:12:18:03:40:SJ cbx_lpm_mux 2013:06:12:18:03:40:SJ cbx_mgl 2013:06:12:18:04:42:SJ cbx_stratix 2013:06:12:18:03:40:SJ cbx_stratixii 2013:06:12:18:03:40:SJ cbx_stratixiii 2013:06:12:18:03:40:SJ cbx_stratixv 2013:06:12:18:03:40:SJ cbx_util_mgl 2013:06:12:18:03:40:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION altsyncram_osc1 (aclr0, address_a[5..0], address_b[5..0], clock0, clocken0, data_a[19..0], wren_a)
RETURNS ( q_b[19..0]);
FUNCTION cntr_imf (clk_en, clock)
RETURNS ( q[5..0]);
FUNCTION cntr_86h (aset, clk_en, clock, cnt_en)
RETURNS ( cout);

--synthesis_resources = lut 12 M4K 1 reg 13 
SUBDESIGN shift_taps_gvv
( 
	aclr	:	input;
	clken	:	input;
	clock	:	input;
	shiftin[9..0]	:	input;
	shiftout[9..0]	:	output;
	taps[19..0]	:	output;
) 
VARIABLE 
	altsyncram2 : altsyncram_osc1;
	dffe4 : dffe;
	cntr1 : cntr_imf;
	cntr3 : cntr_86h;

BEGIN 
	altsyncram2.aclr0 = dffe4.q;
	altsyncram2.address_a[] = cntr1.q[];
	altsyncram2.address_b[] = cntr1.q[];
	altsyncram2.clock0 = clock;
	altsyncram2.clocken0 = clken;
	altsyncram2.data_a[] = ( altsyncram2.q_b[9..0], shiftin[]);
	altsyncram2.wren_a = B"1";
	dffe4.clk = clock;
	dffe4.d = (! cntr3.cout);
	dffe4.ena = clken;
	dffe4.prn = (! aclr);
	cntr1.clk_en = clken;
	cntr1.clock = clock;
	cntr3.aset = aclr;
	cntr3.clk_en = clken;
	cntr3.clock = clock;
	cntr3.cnt_en = (! cntr3.cout);
	shiftout[9..0] = altsyncram2.q_b[19..10];
	taps[] = altsyncram2.q_b[];
END;
--VALID FILE
