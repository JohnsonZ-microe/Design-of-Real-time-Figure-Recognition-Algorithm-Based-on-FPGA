--lpm_counter CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone II" lpm_avalue=4 lpm_direction="DOWN" lpm_port_updown="PORT_UNUSED" lpm_width=3 aset clk_en clock cnt_en cout
--VERSION_BEGIN 13.0 cbx_cycloneii 2013:06:12:18:03:43:SJ cbx_lpm_add_sub 2013:06:12:18:03:43:SJ cbx_lpm_compare 2013:06:12:18:03:43:SJ cbx_lpm_counter 2013:06:12:18:03:43:SJ cbx_lpm_decode 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ cbx_stratix 2013:06:12:18:03:43:SJ cbx_stratixii 2013:06:12:18:03:43:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION cycloneii_lcell_comb (cin, dataa, datab, datac, datad)
WITH ( LUT_MASK, SUM_LUTC_INPUT)
RETURNS ( combout, cout);
FUNCTION cycloneii_lcell_ff (aclr, clk, datain, ena, sclr, sdata, sload)
WITH ( x_on_violation)
RETURNS ( regout);

--synthesis_resources = lut 3 reg 3 
SUBDESIGN cntr_c4h
( 
	aset	:	input;
	clk_en	:	input;
	clock	:	input;
	cnt_en	:	input;
	cout	:	output;
) 
VARIABLE 
	counter_comb_bita0 : cycloneii_lcell_comb
		WITH (
			LUT_MASK = "5A90",
			SUM_LUTC_INPUT = "cin"
		);
	counter_comb_bita1 : cycloneii_lcell_comb
		WITH (
			LUT_MASK = "5A90",
			SUM_LUTC_INPUT = "cin"
		);
	counter_comb_bita2 : cycloneii_lcell_comb
		WITH (
			LUT_MASK = "5A60",
			SUM_LUTC_INPUT = "cin"
		);
	counter_reg_bit7a[2..0] : cycloneii_lcell_ff;
	a_val[2..0]	: WIRE;
	aclr_actual	: WIRE;
	cout_actual	: WIRE;
	data[2..0]	: NODE;
	external_cin	: WIRE;
	pre_hazard[2..0]	: WIRE;
	s_val[2..0]	: WIRE;
	sclr	: NODE;
	sload	: NODE;
	sset	: NODE;
	time_to_clear	: WIRE;
	updown_dir	: WIRE;

BEGIN 
	counter_comb_bita[2..0].cin = ( counter_comb_bita[1..0].cout, external_cin);
	counter_comb_bita[2..0].dataa = ( counter_reg_bit7a[2..0].regout);
	counter_comb_bita[2..0].datab = ( updown_dir, updown_dir, updown_dir);
	counter_comb_bita[2..0].datad = ( B"1", B"1", B"1");
	counter_reg_bit7a[].aclr = aclr_actual;
	counter_reg_bit7a[].clk = clock;
	counter_reg_bit7a[].datain = ( counter_comb_bita[2..0].combout);
	counter_reg_bit7a[].ena = (clk_en & (((cnt_en # sclr) # sset) # sload));
	counter_reg_bit7a[].sdata = (a_val[] $ ((! sclr) & ((sset & s_val[]) # ((! sset) & data[]))));
	counter_reg_bit7a[].sload = ((sclr # sset) # sload);
	a_val[] = B"100";
	aclr_actual = aset;
	cout = cout_actual;
	cout_actual = (counter_comb_bita[2].cout # (time_to_clear & updown_dir));
	data[] = GND;
	external_cin = B"1";
	pre_hazard[] = counter_reg_bit7a[].regout;
	s_val[] = B"111";
	sclr = GND;
	sload = GND;
	sset = GND;
	time_to_clear = B"0";
	updown_dir = B"0";
END;
--VALID FILE
